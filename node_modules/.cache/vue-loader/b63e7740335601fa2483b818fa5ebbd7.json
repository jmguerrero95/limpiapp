{"remainingRequest":"/home/ubuntu/limpiapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/limpiapp/src/components/popups/CompPopsAlert.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu/limpiapp/src/components/popups/CompPopsAlert.vue","mtime":1579658208000},{"path":"/home/ubuntu/limpiapp/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/home/ubuntu/limpiapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/limpiapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapState, mapMutations } from \"vuex\";\r\nexport default {\r\n  data() {\r\n    return {\r\n    };\r\n  },\r\n  methods: {\r\n    elimin(){\r\n      this.elimi({eliminar: true})\r\n    },\r\n    ...mapMutations([\"elimi\"])\r\n  },\r\n  computed: {\r\n    ...mapState([\"warningMessagesAlert\", \"warningMessageType\", \"overlayAlertGlobal\"])\r\n  }\r\n};\r\n",{"version":3,"sources":["CompPopsAlert.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CompPopsAlert.vue","sourceRoot":"src/components/popups","sourcesContent":["<template>\r\n   <v-row justify=\"center\">\r\n      <v-col cols=\"12\">\r\n         <v-row align=\"center\">\r\n            <v-overlay class=\"overlay_full\" :absolute=\"overlayAlertGlobal[0].absolute\" :opacity=\"overlayAlertGlobal[0].opacity\" :value=\"overlayAlertGlobal[0].overlay\" :z-index=\"overlayAlertGlobal[0].zIndex\">\r\n               <!-- content overlay -->\r\n               <v-card\r\n                  class=\"mx-auto\"\r\n                  :color=\"warningMessagesAlert[warningMessageType].warningColor\"\r\n                  dark\r\n                  max-width=\"700\"\r\n                  >\r\n                  <v-card-title>\r\n                     <v-icon\r\n                        large\r\n                        left\r\n                        >\r\n                        {{warningMessagesAlert[warningMessageType].iconWarning}}\r\n                     </v-icon>\r\n                     <span class=\"title font-weight-light\">{{warningMessagesAlert[warningMessageType].warningTitle}}</span>\r\n                  </v-card-title>\r\n                  <v-card-text class=\"headline font-weight-bold\">\r\n                      {{warningMessagesAlert[warningMessageType].warningMessage}}\r\n                  </v-card-text>\r\n                  <v-card-actions>\r\n                     <v-list-item class=\"grow\">\r\n                        <v-row align=\"center\" justify=\"start\">\r\n                          <v-btn v-if=\"overlayAlertGlobal[0].boton\" large text v-on:click=\"elimin()\">\r\n                              <v-icon class=\"mr-1\">mdi-check</v-icon>\r\n                              <span class=\"subheading mr-2\">Aceptar</span>\r\n                           </v-btn>\r\n                           <v-btn large text @click=\"overlayAlertGlobal[0].overlay = false\">\r\n                              <v-icon class=\"mr-1\">mdi-close-circle-outline</v-icon>\r\n                              <span class=\"subheading mr-2\">Cerrar</span>\r\n                           </v-btn>\r\n                        </v-row>\r\n                     </v-list-item>\r\n                  </v-card-actions>\r\n               </v-card>\r\n               <!-- content overlay END -->\r\n            </v-overlay>\r\n         </v-row>\r\n      </v-col>\r\n   </v-row>\r\n</template>\r\n<script>\r\nimport { mapState, mapMutations } from \"vuex\";\r\nexport default {\r\n  data() {\r\n    return {\r\n    };\r\n  },\r\n  methods: {\r\n    elimin(){\r\n      this.elimi({eliminar: true})\r\n    },\r\n    ...mapMutations([\"elimi\"])\r\n  },\r\n  computed: {\r\n    ...mapState([\"warningMessagesAlert\", \"warningMessageType\", \"overlayAlertGlobal\"])\r\n  }\r\n};\r\n</script>\r\n<style scoped>\r\n  .overlay_full{\r\n    position: fixed;\r\n  }\r\n</style>"]}]}